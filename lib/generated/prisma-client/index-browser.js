
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  imageUrl: 'imageUrl',
  createdAt: 'createdAt'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  phone: 'phone',
  clientType: 'clientType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgrotestScalarFieldEnum = {
  id: 'id',
  name: 'name',
  sampleType: 'sampleType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TestParameterScalarFieldEnum = {
  id: 'id',
  agroTestID: 'agroTestID',
  name: 'name',
  unit: 'unit',
  analysisType: 'analysisType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SampleScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  orderItemId: 'orderItemId',
  sampleIdNumber: 'sampleIdNumber',
  collectionDate: 'collectionDate',
  sampleType: 'sampleType',
  collectionLocation: 'collectionLocation',
  cropType: 'cropType',
  bunot: 'bunot',
  manchitroUnit: 'manchitroUnit',
  vumiSrini: 'vumiSrini',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  reportId: 'reportId'
};

exports.Prisma.TestResultScalarFieldEnum = {
  id: 'id',
  sampleId: 'sampleId',
  testParameterId: 'testParameterId',
  value: 'value',
  interpretation: 'interpretation',
  uplandInterpretation: 'uplandInterpretation',
  wetlandInterpretation: 'wetlandInterpretation',
  analysisType: 'analysisType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ComparisonRuleScalarFieldEnum = {
  id: 'id',
  testParameterId: 'testParameterId',
  soilCategory: 'soilCategory',
  min: 'min',
  max: 'max',
  interpretation: 'interpretation',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PricingScalarFieldEnum = {
  id: 'id',
  clientType: 'clientType',
  testParamterId: 'testParamterId',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InstituteScalarFieldEnum = {
  id: 'id',
  prapok: 'prapok',
  name: 'name',
  address: 'address',
  issuedby: 'issuedby',
  phone: 'phone',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  sarokNumber: 'sarokNumber',
  orderDate: 'orderDate',
  status: 'status',
  operatorId: 'operatorId',
  totalAmount: 'totalAmount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  invoiceId: 'invoiceId',
  reportId: 'reportId'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  agroTestId: 'agroTestId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  subtotal: 'subtotal',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderTestParameterScalarFieldEnum = {
  id: 'id',
  orderItemId: 'orderItemId',
  testParameterId: 'testParameterId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  clientId: 'clientId',
  invoiceDate: 'invoiceDate',
  dueDate: 'dueDate',
  totalAmount: 'totalAmount',
  paidAmount: 'paidAmount',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  reportId: 'reportId'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  clientId: 'clientId',
  invoiceId: 'invoiceId',
  reportType: 'reportType',
  reportNumber: 'reportNumber',
  issueDate: 'issueDate',
  status: 'status',
  recommendations: 'recommendations',
  notes: 'notes',
  generatedByUserId: 'generatedByUserId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ClientType = exports.$Enums.ClientType = {
  FARMER: 'FARMER',
  GOVT_ORG: 'GOVT_ORG',
  PRIVATE: 'PRIVATE'
};

exports.SampleType = exports.$Enums.SampleType = {
  SOIL: 'SOIL',
  WATER: 'WATER',
  FERTILIZER: 'FERTILIZER'
};

exports.AnalysisType = exports.$Enums.AnalysisType = {
  ROUTINE: 'ROUTINE',
  SPECIAL: 'SPECIAL',
  RESEARCH: 'RESEARCH',
  Atomic_Absorption: 'Atomic_Absorption',
  Spectrophotmetric: 'Spectrophotmetric',
  Vacuum_Desiccator: 'Vacuum_Desiccator',
  OLSEN: 'OLSEN',
  BRAY: 'BRAY'
};

exports.SampleStatus = exports.$Enums.SampleStatus = {
  PENDING: 'PENDING',
  IN_LAB: 'IN_LAB',
  TESTING: 'TESTING',
  TEST_COMPLETED: 'TEST_COMPLETED',
  REPORT_READY: 'REPORT_READY',
  ISSUED: 'ISSUED',
  CANCELLED: 'CANCELLED'
};

exports.SoilCategory = exports.$Enums.SoilCategory = {
  BOTH: 'BOTH',
  UPLAND: 'UPLAND',
  WETLAND: 'WETLAND'
};

exports.ComparisonType = exports.$Enums.ComparisonType = {
  GREATER_THAN: 'GREATER_THAN',
  LESS_THAN: 'LESS_THAN',
  BETWEEN: 'BETWEEN'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  TESTING_COMPLETED: 'TESTING_COMPLETED',
  REPORT_GENERATED: 'REPORT_GENERATED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  PAID: 'PAID',
  DUE: 'DUE',
  CANCELLED: 'CANCELLED'
};

exports.ReportStatus = exports.$Enums.ReportStatus = {
  DRAFT: 'DRAFT',
  PENDING_REVIEW: 'PENDING_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  ISSUED: 'ISSUED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Client: 'Client',
  Agrotest: 'Agrotest',
  TestParameter: 'TestParameter',
  Sample: 'Sample',
  TestResult: 'TestResult',
  ComparisonRule: 'ComparisonRule',
  Pricing: 'Pricing',
  Institute: 'Institute',
  Order: 'Order',
  OrderItem: 'OrderItem',
  OrderTestParameter: 'OrderTestParameter',
  Invoice: 'Invoice',
  Report: 'Report'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
